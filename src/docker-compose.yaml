services:

############################ 메시지 브로커커
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    # environment:
    # - RABBITMQ_DEFAULT_USER=user
    # - RABBITMQ_DEFAULT_PASS=user
    networks:
      - app-network
  postgresql:
    container_name: postgresql_msa
    image: postgres:latest
    ports:
      - "45432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=parktest1#
    volumes:
      - /volume1/docker/postgresSql/postgres_msa_data:/var/lib/postgresql/data
    networks:
      - app-network
############################ NoSql DB
  redis:
    container_name: redis
    image: redis:6.2-alpine
    ports:
      - "6379:6379"
    networks:
      - app-network
############################ jaeger 모니터링 도구
  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:1.58
    ports:
      - "4317:4317"
      - "16686:16686"
    networks:
      - app-network
############################ prometheus 모니터링 도구
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    user: "root"  # 개발 환경에서만 사용하세요
    ports: 
      - "9090:9090"
    volumes:
      - ./observability/prometheus-config.yaml:/etc/prometheus/prometheus.yml
    networks:
      - app-network

################################################################ API 서비스스
 
  
  basket:
    container_name: basket
    depends_on:
      - redis
      - rabbitmq
      - jaeger
      - product
      - prometheus
    build:
      context: .
      dockerfile: ./basket-microservice/Basket.Service/Dockerfile
    ports:
      - "8000:8080"
    environment:
      # - RabbitMq__HostName=192.168.0.52
      #- ASPNETCORE_URLS=http://0.0.0.0:8080
      # - Redis__Configuration=192.168.0.52:6379
      # - OpenTelemetry__OtlpExporterEndpoint=http://192.168.0.52:4317
      - "RabbitMq__HostName=192.168.20.52"
      - "Redis__Configuration=192.168.20.52:6379"
    networks:
      - app-network


  order:
    depends_on:
      - rabbitmq
      - redis
      - jaeger
      - product
      - prometheus
    container_name: order    
    build: 
      context: .
      dockerfile: ./order-microservice/Order.Service/Dockerfile
    ports:
      - "8001:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      #- ASPNETCORE_URLS=http://0.0.0.0:8081
      - ConnectionStrings__Default=Server=192.168.20.52;Database=Order;Port=45432;User Id=postgres;Password=parktest1#;
      - RabbitMq__HostName=192.168.20.52      
    networks:
      - app-network

  product:
    depends_on:
        #- postgresql
        - rabbitmq
        - redis
        - jaeger
        - prometheus
    container_name: product  
    build: 
        context: .
        dockerfile: ./product-microservice/Product.Service/Dockerfile
    ports:
        - "8002:8080"
    environment:
        - ASPNETCORE_ENVIRONMENT=Development
        # - ASPNETCORE_URLS=http://0.0.0.0:8082
        # - RabbitMq__HostName=192.168.0.52
        - "RabbitMq__HostName=192.168.20.52"
        # - OpenTelemetry__OtlpExporterEndpoint=http://192.168.0.52:4317
        - "Redis__Configuration=192.168.20.52:6379"
        - ConnectionStrings__Default=Server=192.168.20.52;Database=Product;Port=45432;User Id=postgres;Password=parktest1#;
        # - "RabbitMq__UserName=guest"
        # - "RabbitMq__Password=guest"
    networks:
      - app-network
  auth:
    container_name: auth
    build: 
      context: .
      dockerfile: ./auth-microservice/Auth.Service/Dockerfile
    ports:
      - "8003:8080"
    environment:
      - "ASPNETCORE_ENVIRONMENT=Development"
      - ConnectionStrings__Default=Server=192.168.20.52;Database=Product;Port=45432;User Id=postgres;Password=parktest1#;
networks:
  app-network:
    driver: bridge